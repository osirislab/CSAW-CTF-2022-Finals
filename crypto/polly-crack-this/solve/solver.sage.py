

# This file was *autogenerated* from the file ../../polly-crack-this/solve/solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_83297968285319659068199479277537600821638173621636418555341 = Integer(83297968285319659068199479277537600821638173621636418555341); _sage_const_2 = Integer(2); _sage_const_5002 = Integer(5002); _sage_const_1 = Integer(1); _sage_const_123 = Integer(123); _sage_const_999 = Integer(999)
import binascii
from pwn import *

# [STATIC FIELD AND POLYNOMIAL RING FROM CHALLENGE FILE]
p_ = _sage_const_83297968285319659068199479277537600821638173621636418555341 
K = GF(p_)
R = PolynomialRing(K,_sage_const_2 ,'x',order='degrevlex')
R.inject_variables()

# [CONNECT TO SERVER]
host = "crypto.chal.csaw.io"
port = _sage_const_5002          # 6000
server = remote(host, port)

# [GET GROEBNER BASIS]
server.recvuntil("> ")
gb_ = server.recvline()[:-_sage_const_1 ]
gb = sage_eval(gb_.decode('utf-8'), locals=globals())

# [GET CIPERTEXTS]
server.recvuntil("> ")
c0_ = server.recvline()[:-_sage_const_1 ]
c0 = sage_eval(c0_.decode('utf-8'), locals=globals())

server.recvuntil("> ")
c1_ = server.recvline()[:-_sage_const_1 ]
c1 = sage_eval(c1_.decode('utf-8'), locals=globals())

server.recvuntil("> ")
c2_ = server.recvline()[:-_sage_const_1 ]
c2 = sage_eval(c2_.decode('utf-8'), locals=globals())

# [DECRYPT USING HOMOMORPHIC PROPERTIES]
int_dec = ((c0 + c1 + c2 - _sage_const_123 )/_sage_const_999 ).reduce(gb)
print(int_dec)
print(binascii.unhexlify(hex(int(int_dec))[_sage_const_2 :]))


server.close()

